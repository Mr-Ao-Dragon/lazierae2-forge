buildscript {
    repositories {
        maven {url = 'https://maven.minecraftforge.net'}
        maven {url = 'https://maven.parchmentmc.org'}
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

plugins {
    id "com.matthewprenger.cursegradle" version "1.4.0"
    //    id "org.sonarqube" version "3.3"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

//sonarqube {
//    properties {
//        property "sonar.projectKey", "AlmostReliable_templatemod"
//        property "sonar.organization", "almostreliable"
//        property "sonar.host.url", "https://sonarcloud.io"
//    }
//}

version = "${minecraft_version}-${mod_version}"
group = "${mod_base_package}.${mod_id}"
archivesBaseName = mod_id

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: mappings_channel, version: mappings_version

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            // AE2 mixin fix
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg".toString()

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            // AE2 mixin fix
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg".toString()

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            // AE2 mixin fix
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg".toString()

            // data generation
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

// resources from data generation
sourceSets.main.resources {srcDir 'src/generated/resources'}

repositories {
    maven {
        name "Modmaven" // Applied Energistics
        url "https://modmaven.dev/"
        content {
            includeGroup 'appeng'
        }
    }
    maven {
        name "Progwml6 maven" // Just Enough Items
        url "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        name 'BlameJared' // CraftTweaker
        url 'https://maven.blamejared.com'
    }
    maven {
        name 'CurseMaven'
        url 'https://cursemaven.com'
        content {
            includeGroup 'curse.maven'
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // required dependencies
    implementation fg.deobf("appeng:appliedenergistics2:${appeng_version}")
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}:api")
    implementation fg.deobf("com.blamejared.crafttweaker:CraftTweaker-${minecraft_version}:${crt_version}")

    // runtime dependencies
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}") // JEI - in sync with API version
    runtimeOnly fg.deobf("curse.maven:top-245211:3665853") // TOP - 3.1.5
    runtimeOnly fg.deobf("curse.maven:ding-231275:3222705") // Ding - 1.3.0
    runtimeOnly fg.deobf("curse.maven:solar-381462:3569092") // Solar Energy - 0.4.0.3
}

// This block of code expands all the gradle properties in the specified resource targets.
// It copies them into the targets and expands all the defined properties.
def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']
def intoTargets = ["$rootDir/out/production/resources/", "$rootDir/out/production/${project.name}.main/", "$rootDir/bin/main/"]
def replaceProperties = [mod_id                 : mod_id,
                         mod_name               : mod_name,
                         mod_version            : mod_version,
                         mod_authors            : mod_authors,
                         mod_description        : mod_description,
                         mod_credits            : mod_credits,
                         minecraft_version_range: minecraft_version_range,
                         forge_version_range    : forge_version_range,
                         loader_version_range   : loader_version_range,
                         github_user            : github_user,
                         github_repo            : github_repo,
                         appeng_version_range   : appeng_version_range,
                         jei_version_range      : jei_version_range,
                         crt_version_range      : crt_version_range]
processResources {
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }

    intoTargets.each {target ->
        if (file(target).exists()) {
            copy {
                from(sourceSets.main.resources) {
                    include resourceTargets
                    expand replaceProperties
                }
                into target
            }
        }
    }
}

jar {
    manifest {
        attributes(["Specification-Title"     : mod_id,
                    "Specification-Vendor"    : mod_authors,
                    "Specification-Version"   : "1",
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : mod_version,
                    "Implementation-Vendor"   : mod_authors,
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")])
    }
}

curseforge {
    if (System.getenv('CF_API_KEY') != null) {
        // GitHub actions
        apiKey = System.getenv('CF_API_KEY')
    } else {
        // error prevention
        apiKey = "none"
    }
    def RELEASE_TYPE
    if (System.getenv('RELEASE_TYPE') == null || System.getenv('RELEASE_TYPE') == '') {
        RELEASE_TYPE = "release"
    } else {
        RELEASE_TYPE = System.getenv('RELEASE_TYPE')
    }
    project {
        id = project_id
        changelogType = 'markdown'
        changelog = "The whole changelog can be found [here](https://github.com/${github_user}/${github_repo}/blob/${github_branch}/CHANGELOG.md)."
        releaseType = RELEASE_TYPE
        addGameVersion minecraft_version

        mainArtifact(jar) {
            if (RELEASE_TYPE == 'release') {
                displayName = "${mod_name}-${minecraft_version}-${mod_version}"
            } else {
                displayName = "${mod_name}-${minecraft_version}-${mod_version}-${RELEASE_TYPE}"
            }
        }
    }
}

jar.finalizedBy('reobfJar')
